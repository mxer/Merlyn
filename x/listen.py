#!/opt/anaconda3/bin/python3
#
#	Merlyn Speech Control for PC
#
#	We load in commands (& spells) generated by lmtool.py
#	and also language files generated by the Sphinx lmtool
#	then open up a stream of words from the mic via LiveSpeech
#	and try to parse it into commands and possibly some parameters.
#	If succesful, hand off to the OS.
#
import sys, os
from text2int import text2int
from subprocess import call
from pocketsphinx import LiveSpeech, get_model_path

num  = str('7944')		# change this when you update the lang files from CMU Sphinx

mer = os.path.expanduser("~/Merlyn")
cmds = os.path.join(mer, 'cmds/all.txt')
lang = os.path.join(mer, 'lang/')
lm   = os.path.join(lang, num + '.lm')
dic  = os.path.join(lang, num + '.dic')

# Read in and store commands
try:
	lines = open(cmds)
except IOError:
	sys.exit("Could not open file " + cmds)

commands = {}
for line in lines:
	line = line.strip()
	if len(line) > 1 and line[0] != "#":		# skip over empty lines & comments
		(cmd, spell) = line.split(":",1)
		commands[cmd.strip().lower()] = spell.strip()
#print(sorted(commands.keys()))

print( "|	Say 'Merlyn' to make him/her listen.\n\
|	Merlyn will obey the next command. If that is 'keep listening' then\n\
|	Merlyn will continue to obey commands until you say 'stop listening'.\n\
|	Say 'help' to see this message again, and to get further help.")

listening = obey = first = False

#	https://pypi.python.org/pypi/pocketsphinx
speech = LiveSpeech(hmm=os.path.join(get_model_path(), 'en-us'), lm=lm, dic=dic)

for spoken in speech:		# get user's command

	cmd = str(spoken).lower()

	if cmd == 'merlyn':		# need to hear my name before doing stuff
		obey = True			# flag to obey next command
		first = True			# obey flag will be toggled off after first use

	elif cmd == 'keep listening':	# or be told to keep listening for commands
		listening = True

	elif cmd == 'stop listening':	# until told to stop
		listening = False
		obey = True			# need to acknowledge the stop

	elif cmd == 'exit':		# we're done...
		break

	elif cmd == '':			# somehow got an empty command
		continue

	if obey or listening:		# attempt to recognise the command and params

		print("<", cmd)

		params = []
						# start with the whole phrase
		while cmd not in commands.keys():	# if not recognised then
			words = cmd.split()		# split up phrase into words
			if len(words) < 2: break
			word = words[-1]		# split off last word
			del words[-1]
# This is probably temporary. I'm assuming only integer params for now...
			if word == "to":		# Sphinx thinks user said 'to'
				word = "two"			# but more likely they said 'two'
			elif word == "for":		# Sphinx thinks user said 'for'
				word = "four"			# you get the idea...
			params.append(word)		# save words not part of the command
			cmd = ' '.join(words).strip()	# re-join words for possible command

		params.reverse()		# above loop picked off words from right
		ok = cmd in commands
		if ok:				# got a valid command
			spell = commands[cmd]		# this is the spell that Merlyn will utter
			if params:			# are there some params?
				par = ' '.join(params).strip()	# join them back into a string

				try:				# for now I'm assuming ints only 
					num = str(text2int(par))
				
				except:	ok = False

				spell = spell % num		# substitute in the spell

			try:
				retcode = call(spell, shell=True)	# here OS, do this!
				if retcode < 0:
					print("Child was terminated by signal", -retcode, file=sys.stderr)

			except OSError as e:
				print("Execution failed:", e, file=sys.stderr)

			if not first:
				obey = False

		if not ok:	print("> Didn't understand:", cmd)

	first = False
